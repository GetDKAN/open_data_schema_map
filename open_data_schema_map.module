<?php

/**
 * @file
 * Maps entity types to Open Data schemas.
 */

/**
 * Implements hook_menu().
 */
function open_data_schema_map_menu() {
  $items = array();
  $pre = 'admin/config/services/odsm';

  $apis = open_data_schema_map_api_load_all();
  if ($apis) {
    foreach ($apis as $num => $api) {
      $description = $api->description ? $api->description : '';
      if ($api->enabled) {
        $items[$api->endpoint] = array(
          'title' => $api->name,
          'description' => $description,
          'page callback' => 'open_data_schema_map_endpoint',
          'page arguments' => array($api),
          'access arguments' => array('administer open data schema mapper.'),
          'file' => 'open_data_schema_map.pages.inc',
        );
      }
    }
  }
  $items[$pre] = array(
    'title' => 'Open Data Schema Mapper',
    'description' => 'Map Drupal structures to Open Data specfications',
    'page callback' => 'open_data_schema_map_page_overview',
    'access arguments' => array('administer open data schema mapper.'),
    'file' => 'open_data_schema_map.pages.inc',
  );
  $items[$pre . '/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[$pre . '/add/api'] = array(
    'title' => 'Add API',
    'description' => 'Add a new API Endpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_data_schema_map_manage'),
    'access arguments' => array('administer open data schema mapper.'),
    'file' => 'open_data_schema_map.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items[$pre . '/edit/%open_data_schema_map_api'] = array(
    'title' => 'Edit API',
    'description' => 'Edit an existing API Endpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_data_schema_map_manage', 5),
    'access arguments' => array('administer open data schema mapper.'),
    'file' => 'open_data_schema_map.pages.inc',
  );
  $items[$pre . '/delete/%open_data_schema_map_api'] = array(
    'title' => 'Delete API',
    'description' => 'Delete an existing API Endpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_data_schema_map_delete', 5),
    'access arguments' => array('administer open data schema mapper.'),
    'file' => 'open_data_schema_map.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function open_data_schema_map_permission() {
  return array(
    'administer open data schema mapper' => array(
      'title' => t('Administer Open Data Schema Mapper'),
      'description' => t('Make and update open data schema maps'),
      'restrict access' => TRUE,
    ));
}

/**
 * Registers declared schemas.
 */
function open_data_schema_map_register() {
  static $schemas = array();
  if ($schemas) {
    return $schemas;
  }
  foreach (module_implements('open_data_schema') as $module) {
    $data = module_invoke($module, 'open_data_schema');
    $schemas[$data['short_name']] = $data;
  }
  return $schemas;
}

/**
 * Implements hook_help().
 */
function open_data_schema_map_help($path, $arg) {
  switch ($path) {
    case 'admin/config/services/odsm':
      return t('Create APIs using Drupal entities that map to Open Data specifications.');
  }
}

/**
 * Provides form type from field type.
 */
function open_data_schema_map_form_field_type($field_type) {
  switch ($field_type) {
    case "string":
      return 'textfield';
  }
}

/**
 * Recursive function to generate mapping form.
 *
 * @param array $form
 *   Form api ready array to build.
 * @param array $schema
 *   Schema array which is reduced.
 * @param object $api
 *   $api object which is passed around because procedural.
 * @param array $defaults
 *   Array of defaults which matches up with the $schema.
 */
function open_data_schema_map_form_recursion(&$form, $schema, $api, $defaults = NULL) {
  $entity_ref_fields = open_data_schema_map_entity_ref_fields($api->type, $api->bundle);
  foreach ($schema as $key => $value) {
    // Skip if not a top level item.
    if (!is_array($value)) {
      continue;
    }
    if (count($value) == count($value, COUNT_RECURSIVE)) {
      $desc = isset($value['description']) ? $value['description'] : '';
      $description = t('Machine name: %machine_name field type: %type description: %desc', array(
        '%machine_name' => $key, '%type' => $value['type'], '%desc' => $desc));
      $default = isset($defaults[$key]) ? $defaults[$key] : '';
      $form[$key] = array(
        '#title' => $value['title'],
        '#type' => 'textfield',
        '#maxlength' => 256,
        '#description' => $description,
        '#default_value' => $default,
      );
    }
    elseif ($key) {
      $form[$key] = array(
        '#title' => $key,
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
      );
      $entity_ref_fields = open_data_schema_map_entity_ref_fields($api->type, $api->bundle);
      if ($value['type'] == 'array' && $entity_ref_fields) {
        $odsm_entity_reference = isset($defaults[$key]['odsm_entity_reference']['value']) ? $defaults[$key]['odsm_entity_reference']['value'] : '';
        $osd_key_map = $odsm_entity_reference ? open_data_schema_map_token_tree('[node:' . str_replace('_', '-', $odsm_entity_reference) . ']') : '';
        $form[$key]['odsm_entity_reference'] = array(
          '#title' => $key . ' Multivalue Field',
          '#type' => 'select',
          '#options' => array('' => t('-- none --')) + $entity_ref_fields,
          '#default_value' => $odsm_entity_reference,
          '#description' => t('This array can iterate over multi-value fields as long as they are an entity reference. Select entity reference field to use. If none is selected this output will not loop and accept single value tokens. "Nth" represents iteratable tokens.') . $osd_key_map,
        );
      }
      open_data_schema_map_form_recursion($form[$key], $schema[$key], $api, $defaults[$key]);
    }
  }
  return $form;
}

/**
 * Recursive function that walks throw tokens to output rows.
 */
function open_data_schema_map_token_rows(&$rows, $token_info) {
  if (isset($token_info['children'])) {
    foreach ($token_info['children'] as $token_child => $token_child_info) {
      if (is_array($token_child_info)) {
        $token_child = str_replace('1', 'Nth', $token_child);
        $token_child_info['name'] = str_replace('1', 'Nth', $token_child_info['name']);
        $token_child_info['raw token'] = str_replace('1', 'Nth', $token_child_info['raw token']);
        $token_child_info['token'] = str_replace('1', 'N', $token_child_info['token']);
        $token_child_info['description'] = str_replace('1', 'Nth', $token_child_info['description']);
        $token_child_info['parent'] = str_replace('1', 'Nth', $token_child_info['parent']);
        $row = _token_token_tree_format_row($token_child, $token_child_info);
        unset($row['data']['value']);
        $rows[] = $row;
        if (isset($token_info['children'])) {
          open_data_schema_map_token_rows($rows, $token_child_info);
        }
      }
    }
  }

}

/**
 * Creates token tree for single token.
 */
function open_data_schema_map_token_tree($token) {
  module_load_include('inc', 'token', 'token.pages');

  $tree = token_build_tree('node');
  if (!isset($tree[$token])) {
    $token = substr($token, 0, -1) . ":?]";
  }
  if (isset($tree[$token])) {
    $token_info = $tree[$token];
    if (isset($token_info['children'])) {
      $shifted = array_shift($token_info['children']);
      $token_info['children'] = array($shifted['raw token'] => $shifted);
    }

    $row = _token_token_tree_format_row($token, $token_info);
    unset($row['data']['value']);
    $rows = array($row);
    open_data_schema_map_token_rows($rows, $token_info);

    $element = array(
      '#theme' => 'tree_table',
      '#header' => array(
        t('Name'),
        t('Token'),
        t('Description'),
      ),
      '#rows' => $rows,
      '#attributes' => array('class' => array('token-tree')),
      '#empty' => t('No tokens available'),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'token') . '/token.js'),
        'css' => array(drupal_get_path('module', 'token') . '/token.css'),
        'library' => array(array('token', 'treeTable')),
      ),
    );
    $element['#caption'] = t("Click a token to insert it into the field you've last clicked.");
    $element['#attributes']['class'][] = 'token-click-insert';
    return drupal_render($element);
  }

}

/**
 * Lists APIs created with this module.
 */
function open_data_schema_map_api_table() {
  $apis = open_data_schema_map_api_load_all();
  foreach ($apis as $num => $api) {
    unset($apis[$num]->id);
    unset($apis[$num]->description);
    unset($apis[$num]->mapping);
    unset($apis[$num]->arguments);
    $apis[$num]->edit = l(t('edit'), 'admin/config/services/odsm/edit/' . $api->machine_name);
  }
  return $apis;
}

/**
 * Determines whether a machine name exists.
 *
 * @param string $machine_name
 *   API machine name.
 */
function open_data_schema_map_api_exist($machine_name) {
  return FALSE;
}

/**
 * Loads all APIs.
 */
function open_data_schema_map_api_load_all() {
  $record = &drupal_static(__FUNCTION__, array());
  if ($record) {
    return $record;
  }
  $results = db_query("select machine_name from {open_data_schema_map}")->fetchAll();
  foreach ($results as $result) {
    $record[] = open_data_schema_map_api_load($result->machine_name);
  }
  return $record;
}

/**
 * Loads API.
 *
 * @param string $machine_name
 *   API machine name.
 *
 * @return object
 *   API object.
 */
function open_data_schema_map_api_load($machine_name) {
  $record = db_query("select * from {open_data_schema_map} where machine_name = :machine_name", array(':machine_name' => $machine_name))->fetchObject();
  if ($record) {
    $record->mapping = unserialize($record->mapping);
    $record->arguments = unserialize($record->arguments);
  }
  return $record;
}

/**
 * Loads schema from file.
 */
function open_data_schema_map_schema_load($schema_name) {
  $schemas = &drupal_static(__FUNCTION__, array());
  if ($schemas) {
    return $schemas;
  }
  $schemas = open_data_schema_map_register();
  $loaded_schema = $schemas[$schema_name];
  $json_file = $loaded_schema['schema_file'];
  $json = file_get_contents($json_file);
  $schema = drupal_json_decode($json);
  return $schema;
}

/**
 * Retrieves public, published dataset nodes.
 *
 * @param string $type
 *   Entity type.
 * @param string $bundle
 *   Entity bundle.
 * @param string $limit
 *   Number of results to return.
 * @param string $offset
 *   Offset of results to return.
 * @param array $args
 *   - query: current value of query.
 *   - value: value field
 *   - token: token to get data from
 *
 * @return array
 *   An array of dataset nodes.
 */
function open_data_schema_map_endpoint_query($type = 'node', $bundle = 'dataset', $limit = 0, $offset = 0, $args = array()) {
  $args = is_array($args) ? $args : array($args);
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', $type)
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', 1)
    ->propertyOrderBy('created', 'DESC')
    // Run the query as user 1.
    ->addMetaData('account', user_load(1));

  if ($limit) {
    $query->range($offset, $limit);
  }
  foreach ($args as $arg => $arg_value) {
    $field = open_data_schema_map_discover_field($arg_value['token']['value']);
    drupal_alter('open_data_schema_map_args', $field, $arg_value);
    // Pass conditions if no queries.
    if (!isset($arg_value['query']) || !$arg_value['query']) {
      continue;
    }
    if ($field[0] == 'node') {
      if (substr($field[1], 0, 5) == 'field') {
        $query->fieldCondition($field[1], $arg_value['value'], $arg_value['query']);
      }
      else {
        $query->propertyCondition($field[1], $arg_value['query']);
      }
    }
  }
  $entities = $query->execute();
  $ids = NULL;
  if ($entities) {
    $ids = array_keys($entities[$type]);
  }

  return $ids;
}

/**
 * Returns array from token.
 */
function open_data_schema_map_discover_field($token) {
  $token = rtrim(trim($token, '['), ']');
  return explode(':', $token);
}

/**
 * Discovers callback for argument options.
 */
function open_data_schema_map_schema_options_callback($id) {
  $schema_types = open_data_schema_map_schema_types();
  foreach ($schema_types as $schema_type => $data) {
    if ($data['id'] == $id) {
      return $data['options_callback'];
    }
  }
  return NULL;
}
/**
 * Discovers callback for schema type.
 */
function open_data_schema_map_schema_types_callback($id) {
  $schema_types = open_data_schema_map_schema_types();
  foreach ($schema_types as $schema_type => $data) {
    if ($data['id'] == $id) {
      return $data['callback'];
    }
  }
  return NULL;
}

/**
 * Creates array of schema types.
 */
function open_data_schema_map_schema_types() {
  $schemas = array(
    'json-4' => array(
      'id' => 'http://json-schema.org/draft-04/schema#',
      'callback' => 'open_data_schema_map_json_4',
      'options_callback' => 'open_data_schema_mapper_args_options_json_4',
    ),
    'json-3' => array(
      'id' => 'http://json-schema.org/draft-03/schema#',
      'callback' => 'open_data_schema_map_json_3',
      'options_callback' => 'open_data_schema_mapper_args_options_json_3',
    ),
  );

  drupal_alter('open_data_schema_map_schema_types', $schemas);
  return $schemas;
}

/**
 * Creates argument form.
 */
function open_data_schema_map_args_form($num_args, $options, $defaults) {
  $form = array();
  for ($i = 1; $i <= $num_args; $i++) {
    $form[$i] = array(
      '#title' => 'Argument ' . $i,
      '#type' => 'fieldset',
    );
    $form[$i]['field'] = array(
      '#title' => 'Schema Field',
      '#type' => 'select',
      '#description' => t('Schema field to use as an argument. Is the "key" in /endpoint?KEY=123456.'),
      '#options' => $options,
      '#default_value' => isset($defaults[$i]['field']) ? $defaults[$i]['field'] : '',
    );
    $special_args = open_data_schema_map_special_arguments();
    if (isset($defaults[$i]['field']) && isset($special_args[$defaults[$i]['field']])) {
      $form[$i]['value'] = array(
        '#title' => 'Default ' . $special_args[$defaults[$i]['field']] . ' Value',
        '#type' => 'textfield',
        '#description' => t('Defaut value for !value. IE /endpoint?%field=X.', array('!value' => $special_args[$defaults[$i]['field']], '%field' => $defaults[$i]['field'])),
        '#default_value' => isset($defaults[$i]['value']) ? $defaults[$i]['value'] : '',
      );
    }
    else {
      $form[$i]['value'] = array(
        '#title' => 'Schema Field Column',
        '#type' => 'textfield',
        '#description' => t('Value for schema field. Only for tokens with [nodes:field_FIELD_NAME]. This is the column name in the field table to grab. Defaults to "safe_value".'),
        '#default_value' => isset($defaults[$i]['value']) ? $defaults[$i]['value'] : '',
      );
    }
  }
  return $form;
}

/**
 * Special fields for arguments.
 */
function open_data_schema_map_special_arguments() {
  return array(
    'offset' => t('Offset'),
    'limit' => t('Limit'),
  );
}

/**
 * Finds entity reference fields for a given bundle.
 *
 * @param string $entity
 *   Entity machine name.
 * @param string $bundle
 *   Bundle machine name.
 *
 * @return array
 *   Array of entity reference or similar fields.
 */
function open_data_schema_map_entity_ref_fields($entity, $bundle, $ref_fields = array('entityreference', 'taxonomy')) {
  // Get instances.
  $instances = field_info_instances($entity, $bundle);

  // Get reference fields.
  $query = db_select('field_config', 'f');
  $query->fields('f', array('field_name'));
  $or = db_or();
  $or->condition('cardinality', '1', '>');
  $or->condition('cardinality', '-1', '=');
  $query->condition($or);
  $query->distinct();
  $rows = $query->execute();
  $field_names = array();

  foreach ($rows as $row) {
    $field_name = $row->field_name;
    // See if reference field is used in bundle.
    if (isset($instances[$field_name])) {
      $field_names[$field_name] = $instances[$field_name]['label'];
    }
  }

  return $field_names;
}

/**
 * Creates form from JSON 4 schema.
 */
function open_data_schema_map_json_4($schema, $api, $defaults) {
  $form = array();
  $form['#title'] = $schema['title'] ? $schema['title'] : t('Mapping');
  $form['#description'] = $schema['description'] ? $schema['description'] : t('Fields to map.');
  $form['#type'] = 'fieldset';

  foreach ($schema['properties'] as $item => $data) {
    if (!isset($data['type'])) {
      if (isset($data['anyOf'][0]['type'])) {
        $data['type'] = $data['anyOf'][0]['type'];
      }
      else {
        $data['type'] = 'string';
      }
    }
    $desc = isset($data['description']) ? $data['description'] . t('Type:') . $data['type'] : t('Type:') . $data['type'];
    $form[$item] = array(
      '#title' => $data['title'],
      '#type' => 'textfield',
      '#maxlength' => 256,
      '#description' => $desc,
      '#default_value' => isset($defaults[$item]['value']) ? $defaults[$item]['value'] : '',
      '#field_type' => $data['type'],
    );
    if ($data['type'] == 'array' && isset($data['anyOf'][0]['items']['type']) && $data['anyOf'][0]['items']['type'] == 'object') {
      $entity_ref_fields = open_data_schema_map_entity_ref_fields($api->type, $api->bundle);
      $odsm_entity_reference = isset($defaults[$item]['odsm_entity_reference']['value']) ? $defaults[$item]['odsm_entity_reference']['value'] : '';
      $osd_key_map = $odsm_entity_reference ? open_data_schema_map_token_tree('[node:' . str_replace('_', '-', $odsm_entity_reference) . ']') : '';
      $form[$item] = array(
        '#title' => $data['title'],
        '#type' => 'fieldset',
        '#description' => $data['description'],
      );
      $form[$item]['odsm_entity_reference'] = array(
        '#title' => $item . ' Multivalue Field',
        '#type' => 'select',
        '#options' => array('' => t('-- none --')) + $entity_ref_fields,
        '#default_value' => $odsm_entity_reference,
        '#description' => t('This array can iterate over multi-value fields. Select multi-value field to use. If none is selected this output will not loop and accept single value tokens. Selecting and saving an entity reference will produce a list of chaiabale tokens. For non entity reference fields, replace "?" with "Nth:value". "Nth" represents iteratable tokens.') . $osd_key_map,
      );
      foreach ($data['anyOf'][0]['items']['properties'] as $subitem => $subdata) {
        $desc = isset($subdata['description']) ? $subdata['description'] . t('Type:') . $subdata['type'] : t('Type:') . $subdata['type'];
        $form[$item][$subitem] = array(
          '#title' => $subdata['title'],
          '#type' => 'textfield',
          '#maxlength' => 256,
          '#description' => $desc,
          '#default_value' => isset($defaults[$item][$subitem]['value']) ? $defaults[$item][$subitem]['value'] : '',
        );
      }
    }
  }

  return $form;
}

/**
 * Constructs form for json schema 3.
 */
function open_data_schema_map_json_3_recursion(&$form, $schema, $api, $defaults = NULL) {
  foreach ($schema as $item => $data) {
    $default_value = isset($defaults[$item]['value']) ? $defaults[$item]['value'] : '';
    // Skip if not a top level item.
    if (!is_array($data)) {
      continue;
    }
    $field_type = $data['type'] ? $data['type'] : 'string';
    $form[$item] = array(
      '#title' => $item,
      '#type' => 'textfield',
      '#description' => $data['description'],
      '#field_type' => $field_type,
      '#default_value' => $default_value,
    );
    if ($field_type == 'object' || $field_type == 'array' && $data['items']['type'] == 'object') {
      $entity_ref_fields = open_data_schema_map_entity_ref_fields($api->type, $api->bundle);
      $odsm_entity_reference = isset($defaults[$item]['odsm_entity_reference']['value']) ? $defaults[$item]['odsm_entity_reference']['value'] : '';
      $osd_key_map = $odsm_entity_reference ? open_data_schema_map_token_tree('[node:' . str_replace('_', '-', $odsm_entity_reference) . ']') : '';
      $form[$item] = array(
        '#title' => $item,
        '#type' => 'fieldset',
        '#description' => $data['description'],
        '#field_type' => $field_type,
      );
      $form[$item]['odsm_entity_reference'] = array(
        '#title' => $item . ' Multivalue Field',
        '#type' => 'select',
        '#options' => array('' => t('-- none --')) + $entity_ref_fields,
        '#default_value' => $odsm_entity_reference,
        '#description' => t('This array can iterate over multi-value fields as long as they are an entity reference. Select entity reference field to use. If none is selected this output will not loop and accept single value tokens. "Nth" represents iteratable tokens.') . $osd_key_map,
      );
      if ($data['type'] == 'object') {
        open_data_schema_map_json_3_recursion($form[$item], $data['properties'], $api, $defaults[$item]);
      }
      elseif ($data['type'] == 'array' && $data['items']['type'] == 'object') {
        open_data_schema_map_json_3_recursion($form[$item], $data['items']['properties'], $api, $defaults[$item]);
      }
    }
  }
}

/**
 * Creates form from JSON 3 schema.
 */
function open_data_schema_map_json_3($schema, $api, $defaults) {
  $form = array();
  $form['#title'] = t('Mapping');
  $form['#description'] = $schema['description'] ? $schema['description'] : t('Fields to map.');
  $form['#type'] = 'fieldset';
  open_data_schema_map_json_3_recursion($form, $schema['properties'], $api, $defaults);

  return $form;
}

/**
 * Creates option list from available arguments.
 */
function open_data_schema_mapper_args_options_json_4($schema) {
  $options = array();
  foreach ($schema['properties'] as $id => $data) {
    $options[$id] = $data['title'];
  }
  return $options;
}

/**
 * Creates option list from available arguments.
 */
function open_data_schema_mapper_args_options_json_3($schema) {
  $options = array();
  foreach ($schema['properties'] as $id => $data) {
    $options[$id] = $id;
  }
  return $options;
}

/**
 * Wrapper around token_replace.
 */
function open_data_schema_mapper_token_replace($token, $entity_type, $entity) {
  // Does the token have an "or".
  $output = '';
  if (preg_match('/\] \|\| \[/', $token)) {
    $tokens = explode(' || ', $token);
    foreach ($tokens as $token) {
      if ($output = token_replace($token, array($entity_type => $entity), array('clear' => TRUE))) {
        return $output;
      }
    }
  }
  // Does the token have an "and".
  elseif (preg_match('/\] && \[/', $token)) {
    $tokens = explode(' && ', $token);
    foreach ($tokens as $token) {
      $rend_tokens[] = token_replace($token, array($entity_type => $entity), array('clear' => TRUE));
    }
    $output = implode(' ', $rend_tokens);
  }
  else {
    $output = token_replace($token, array($entity_type => $entity), array('clear' => TRUE));
  }

  return $output;
}

/**
 * Provides working arguments by validating fields and queries.
 */
function open_data_schema_map_endpoint_args($map, $queries, $args = array()) {
  $output = array();
  if ($queries) {
    $output = $args;
    foreach ($args as $num => $arg) {
      // Args have 'query', 'value', and 'token' keys.
      $output[$num]['token'] = isset($map[$arg['field']]) ? $map[$arg['field']] : '';
      $output[$num]['value'] = $args[$num]['value'] ? $args[$num]['value'] : 'value';
      foreach ($queries as $query_field => $query_value) {
        // Make sure query passed to enpoint is actual argument field.
        if ($arg['field'] == $query_field) {
          $output[$num]['query'] = $query_value;
        }
      }
    }
  }
  return $output;
}

/**
 * Process entities using api.
 */
function open_data_schema_map_endpoint_process_map($ids, $api) {
  $result = array();
  if ($ids) {
    $schema = open_data_schema_map_schema_load($api->api_schema);
    foreach ($ids as $key => $id) {
      $entity = entity_load($api->type, array($id));
      foreach ($api->mapping as $api_field => $token) {
        // Don't show results for fields without tokens.
        if ($token) {
          if (isset($token['value']) && !$token['value']) {
            continue;
          }
          if (isset($token['odsm_entity_reference']['value']) && !$token['odsm_entity_reference']['value']) {
            continue;
          }
          $result[$key][$api_field] = open_data_schema_map_endpoint_process_field($api_field, $token, $api->type, $entity[$id]);
        }
      }
    }
  }
  return $result;
}

/**
 * Processes individual field.
 */
function open_data_schema_map_endpoint_process_field($api_field, $token, $type, $entity) {
  $result = array();
  if ($token && isset($token['value']) && isset($token['type'])) {
    $result = open_data_schema_mapper_token_replace($token['value'], $type, $entity);
    $result = open_data_schema_mapper_field_type_check($result, $token);
  }
  elseif (is_array($token)) {
    // Here we are looking up any entity reference fields and looping
    // through them.
    $result = array();
    if ($token['odsm_entity_reference']) {
      $values = '';
      if ($ref_field = $token['odsm_entity_reference']['value']) {
        $field_language = field_language($type, $entity, $ref_field);
        $values = isset($entity->{$ref_field}[$field_language]) ? $entity->{$ref_field}[$field_language] : NULL;
      }
      $values = $values ? $values : array(array());
      unset($token['odsm_entity_reference']);
      foreach ($values as $num => $item) {
        $subvalue = array();
        foreach ($token as $subfield => $subtoken) {
          $subtoken['value'] = str_replace('Nth', $num, $subtoken['value']) ? str_replace('Nth', $num, $subtoken['value']) : $subtoken['value'];
          if ($subtoken['value']) {
            $subvalue[$subfield] = open_data_schema_mapper_token_replace($subtoken['value'], $type, $entity);
            $subvalue[$subfield] = open_data_schema_mapper_field_type_check($subvalue[$subfield], $subtoken);
          }
        }
        if ($subvalue) {
          $result[] = $subvalue;
        }
      }
    }
  }
  drupal_alter('open_data_schema_map_process_field', $api_field, $token);
  return $result;
}

/**
 * Checks output for expected types and adjusts.
 */
function open_data_schema_mapper_field_type_check($value, $token) {
  if ($token['type'] == 'array') {
    if (preg_match('/, /', $value)) {
      $value = explode(', ', $value);
    }
    else {
      $value = array($value);
    }
  }
  elseif ($token['type'] == 'object') {
    // TODO: make object.
  }
  return $value;
}

/**
 * Grabs special from arguments and removes it.
 */
function open_data_schema_map_endpoint_special_arg(&$query_args, $default_args, $type) {
  $value = '';
  foreach ($query_args as $num => $arg) {
    if ($arg['field'] == $type) {
      $value = $arg['query'];
      unset($query_args[$num]);
    }
  }
  if (!$value) {
    foreach ($default_args as $num => $arg) {
      if ($arg['field'] == $type) {
        $value = $arg['value'];
        unset($query_args[$num]);
      }
    }
  }
  return $value;
}
/**
 * Implements hook_open_data_schema_map_args().
 */
function open_data_schema_map_open_data_schema_map_args_alter(&$field, &$arg) {
  if ($field[0] == 'node' && $field[1] == 'url') {
    if ($arg['token']['value'] == '[node:url:arg:last]') {
      $result = db_select('url_alias', 'url')->fields('url', array('source', 'alias'))->execute()->fetchAll();
      $field[1] = 'nid';
      foreach ($result as $result) {
        $alias = explode('/', $result->alias);
        if ($alias[count($alias) - 1] == $arg['query']) {
          $nid = explode('/', $result->source);
          $arg['query'] = $nid[count($nid) - 1];
          return;
        }
      }
    }
    elseif ($arg['token']['value'] == '[node:url]') {
      $field[1] = 'nid';
      $query = db_select('url_alias', 'url');
      $query->fields('f', array('source'));
      $query->condition('alias', $arg['query'], '=');
      $query->distinct();
      $rows = $query->execute();
      foreach ($rows as $row) {
        if ($row->source) {
          $nid = explode('/', $row->source);
          $arg['query'] = $nid[count($nid) - 1];
          return;
        }
      }
    }
  }
}
