<?php

/**
 * @file
 * Maps entity types to Open Data schemas.
 */

/**
 * TODO:
 *
 * register schema
 * add table
 * create form
 * render output
 * featurize.
 */

/**
 * Implements hook_menu().
 */
function open_data_schema_map_menu() {
  $items = array();
  $pre = 'admin/config/services/odsm';

  $apis = open_data_schema_map_api_load_all();
  foreach ($apis as $num => $api) {
    $description = $api['description'] ? $api['description'] : '';
    $items[$api['endpoint']] = array(
      'title' => $api['name'],
      'description' => $description,
      'page callback' => 'open_data_schema_map_endpoint',
      'page arguments' => array($api),
      'access arguments' => array('administer open data schema mapper.'),
    );
  }
  $items[$pre] = array(
    'title' => 'Open Data Schema Mapper',
    'description' => 'Map Drupal structures to Open Data specfications',
    'page callback' => 'open_data_schema_map_page_overview',
    'access arguments' => array('administer open data schema mapper.'),
  );
  $items[$pre . '/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[$pre . '/add/api'] = array(
    'title' => 'Add API',
    'description' => 'Add a new API Endpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_data_schema_map_add_api'),
    'access arguments' => array('administer open data schema mapper.'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items[$pre . '/edit/%open_data_schema_map_api'] = array(
    'title' => 'Edit API',
    'description' => 'Edit an existing API Endpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_data_schema_map_add_api', 5),
    'access arguments' => array('administer open data schema mapper.'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function open_data_schema_map_permission() {
  return array(
    'administer open data schema mapper' => array(
      'title' => t('Administer Open Data Schema Mapper'),
      'description' => t('Make and update open data schema maps'),
      'restrict access' => TRUE,
    ));
}

/**
 * Registers declared schemas.
 */
function open_data_schema_map_register() {
  static $schemas = array();
  if ($schemas) {
    return $schemas;
  }
  foreach (module_implements('open_data_schema') as $module) {
    $data = module_invoke($module, 'open_data_schema');
    $schemas[$data['short_name']] = $data;
  }
  return $schemas;
}

/**
 * Implements hook_help().
 */
function open_data_schema_map_help($path, $arg) {
  switch ($path) {
    case 'admin/config/services/odsm':
      return t('Create APIs using Drupal entities that map to Open Data specifications.');
  }
}


/**
 * Callback for ODSM overiew page.
 */
function open_data_schema_map_page_overview() {
  $form = array();
  $apis = open_data_schema_map_api_table();
  $list = array();
  foreach ($apis as $name => $data) {
    $list[] = $data;
  }
  $header = array();
  $header[] = t('title');
  $header[] = t('Schema');
  $header[] = t('Entity');
  $header[] = t('Bundle');
  $header[] = t('Endpoint');
  $header[] = t('Edit');
  $header[] = t('Delete');
  $rows = $list;
  return array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('class' => array('search-api-overview')),
    '#empty' => t('There are no search servers or indexes defined yet.'),
  );
}

/**
 * Callback for primary menu page.
 */
function open_data_schema_map_add_api(array $form, array &$form_state, $api = NULL) {
  drupal_set_title(t('Add API'));
  $schemas = open_data_schema_map_register();
  if (!$schemas) {
    $form['empty'] = array(
      '#type' => 'item',
      '#title' => 'No Available Schemas',
      '#markup' => t('You must enable an Open Data schema to add an endpoint.'),
    );
    return $form;
  }
  $list = array();
  foreach ($schemas as $name => $data) {
    $list[$name] = $data['title'];
  }
  $markup = t('No APIs created.');
  if ($list) {
    $markup = t('Choose from the available APIs:') . theme('item_list', $list);
  }
  $entity_types = entity_get_info();
  foreach ($entity_types as $entity_name => $entity_info) {
    $entity_list[$entity_name] = $entity_info['label'];
  }
  $selected_entity = '';
  $selected_schema = '';
  if (isset($form_state['triggering_element']['#name']) && $name = $form_state['triggering_element']['#name']) {
    $selected_entity = $form_state['triggering_element']['#value'];
  }
  elseif ($api) {
    $selected_entity = $api->type;
  }
  $form['name'] = array(
    '#title' => 'Title',
    '#type' => 'textfield',
    '#description' => t('Add an administrative title.'),
    '#required' => TRUE,
  );
  $form['machine_name'] = array(
    '#type' => 'machine_name',
    '#maxlength' => 50,
    '#machine_name' => array(
      'exists' => 'open_data_schema_map_api_exist',
    ),
  );
  $form['type'] = array(
    '#title' => 'Entity Type',
    '#type' => 'select',
    '#description' => t('Entity type.'),
    '#options' => $entity_list,
    '#required' => TRUE,
  );
  if ($api) {
    $form['type']['#disabled'] = TRUE;
  }
  else {
    $form['type']['#ajax'] = array(
      'callback' => 'open_data_schema_map_bundle_ajax_callback',
      'wrapper' => 'open-data-schema-map-bundle-options',
    );
  }
  $bundle_list = array();
  if ($selected_entity) {
    foreach ($entity_types[$selected_entity]['bundles'] as $bundle_name => $bundle_data) {
      $bundle_list[$bundle_name] = $bundle_data['label'];
    }
    $form['bundle'] = array(
      '#title' => 'Bundle',
      '#type' => 'select',
      '#description' => t('Entity type bundle.'),
      '#options' => $bundle_list,
      '#required' => TRUE,
    );
    if ($api) {
      $form['bundle']['#disabled'] = TRUE;
    }
  }
  else {
    $form['bundle'] = array(
      '#title' => 'Bundle',
      '#type' => 'item',
      '#markup' => t('Select an entity type'),
      '#required' => TRUE,
    );
  }
  $form['bundle']['#prefix'] = '<div id="open-data-schema-map-bundle-options">';
  $form['bundle']['#suffix'] = '</div>';
  $form['endpoint'] = array(
    '#title' => 'Endpoint',
    '#type' => 'textfield',
    '#description' => t('Add and enpoint ie "api/3/action/package_show".'),
    '#required' => TRUE,
  );
  $form['api_schema'] = array(
    '#title' => 'Schema',
    '#type' => 'select',
    '#description' => t('Select from the available schemas.'),
    '#options' => $list,
    '#required' => TRUE,
  );
  // Only add Schema if we've already saved the initial config.
  if ($api) {
    $form['api_schema']['#disabled'] = TRUE;
    $selected_schema = $api->api_schema;
    $form['mapping'] = array(
      '#title' => 'Mapping',
      '#description' => t('Fields for selected schema.'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#required' => TRUE,
    );
    if (module_exists('token')) {
      $form['mapping']['token_help'] = array(
        '#title' => t('Replacement patterns'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#description' => t('Prefer raw-text replacements for text to avoid problems with HTML entities!'),
      );
      $form['mapping']['token_help']['help'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array('node'),
      );
    }
    $schema = open_data_schema_map_schema_load($selected_schema);
    $form['mapping']['mapping'] = open_data_schema_map_schema_form($schema['fields'], $api);

    // Load defaults.
    $form['name']['#default_value'] = $api->name;
    $form['machine_name']['#default_value'] = $api->machine_name;
    $form['type']['#default_value'] = $api->type;
    $form['bundle']['#default_value'] = $api->bundle;
    $form['endpoint']['#default_value'] = $api->endpoint;
    $form['api_schema']['#default_value'] = $api->api_schema;

    $form['id'] = array(
      '#type' => 'hidden',
      '#value' => $api->id,
    );

  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create API'),
  );
  return $form;
}

/**
 * Creates form for schema fields.
 */
function open_data_schema_map_schema_form($fields, $api) {
  $form = array();
  if (isset($api->mapping)) {
    $defaults = unserialize($api->mapping);
  }
  foreach ($fields as $machine_name => $data) {
    $desc = isset($data['description']) ? $data['description'] : '';
    $default = isset($defaults[$machine_name]) ? $defaults[$machine_name] : '';
    $form[$machine_name] = array(
      '#title' => $data['title'],
      '#type' => 'textfield',
      '#description' => $desc,
      '#default_value' => $default,
    );
    $form['#tree'] = TRUE;
  }
  return $form;
}

/**
 * Form AJAX handler for search_api_admin_add_server().
 *
 * Just returns the "options" array of the already built form array.
 */
function open_data_schema_map_bundle_ajax_callback(array $form, array &$form_state) {
  return $form['bundle'];
}

/**
 * Submit function for api map.
 */
function open_data_schema_map_add_api_submit($form, $form_state) {
  $db_schema = drupal_get_schema('open_data_schema_map');
  $values = $form_state['values'];
  $record = array();
  // Prepare values for insertion.
  foreach ($db_schema['fields'] as $name => $data) {
    if (isset($values[$name])) {
      $record[$name] = $values[$name];
    }
  }
  // Decide if we are updating or inserting.
  if (isset($record['id']) && $record['id']) {
    $update = array('id');
  }
  else {
    $update = array();
  }
  drupal_static_reset('open_data_schema_map_api_load_all');
  drupal_write_record('open_data_schema_map', $record, $update);
  drupal_goto('admin/config/services/odsm/edit/' . $values['machine_name']);
}

/**
 * Lists APIs created with this module.
 */
function open_data_schema_map_api_table() {
  $apis = open_data_schema_map_api_load_all();
  foreach ($apis as $num => $api) {
    unset($apis[$num]['id']);
    unset($apis[$num]['machine_name']);
    unset($apis[$num]['description']);
    unset($apis[$num]['mapping']);
    unset($apis[$num]['arguments']);
    $apis[$num]['edit'] = l(t('edit'), 'admin/config/services/odsm/edit/' . $api['machine_name']);
  }
  return $apis;
}

/**
 * Determines whether a machine name exists.
 *
 * @param string $machine_name
 *   API machine name.
 */
function open_data_schema_map_api_exist($machine_name) {
  return FALSE;
}

/**
 * Loads all APIs.
 */
function open_data_schema_map_api_load_all() {
  $record = &drupal_static(__FUNCTION__, array());
  if ($record) {
    return $record;
  }
  $results = db_query("select * from {open_data_schema_map}")->fetchAllAssoc('machine_name');
  foreach ($results as $result) {
    $record[] = (array) $result;
  }
  return $record;
}
/**
 * Loads API.
 *
 * @param string $machine_name
 *   API machine name.
 *
 * @return object
 *   API object.
 */
function open_data_schema_map_api_load($machine_name) {
  $record = db_query("select * from {open_data_schema_map} where machine_name = :machine_name", array(':machine_name' => $machine_name))->fetchObject();
  return $record;
}

/**
 * Loads schema from file.
 */
function open_data_schema_map_schema_load($schema_name) {
  $schemas = open_data_schema_map_register();
  $loaded_schema = $schemas[$schema_name];
  $json_file = $loaded_schema['schema_file'];
  $json = file_get_contents($json_file);
  $schema = drupal_json_decode($json);
  return $schema;
}

/**
 * Creates endpoint.
 */
function open_data_schema_map_endpoint($api) {
  $api['mapping'] = unserialize($api['mapping']);
  return drupal_json_output($api);
}
