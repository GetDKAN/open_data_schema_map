<?php

/**
 * @file
 * Schemas for schemas, open data style.
 */

/**
 * Implements hook_schema().
 */
function open_data_schema_map_schema() {
  $schema['open_data_schema_map'] = array(
    'description' => 'Stores open data schema mappings',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for an api.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The displayed name for an api.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'Whether API is enabled.',
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
      ),
      'machine_name' => array(
        'description' => 'The machine name for an api.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'api_schema' => array(
        'description' => 'The schema for an api.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The displayed description for an api.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'description' => 'The name of the entity type a mapping applies to (node, user, comment, etc.).',
      ),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'description' => 'The name of the bundle a mapping applies to.',
      ),
      'mapping' => array(
        'description' => 'The serialized mapping of the schema to fields.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'outputformat' => array(
        'description' => 'Output Format.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => 'json',
      ),
      'endpoint' => array(
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'description' => 'The name of the endpoint for the new API.',
      ),
      'arguments' => array(
        'description' => 'The serialized mapping of the arguments to fields.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'filter_enabled' => array(
        'description' => 'Whether Data Federation Filter is enabled.',
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['odsm_url_validation'] = array(
    'description' => 'Stores open data schema dataset URL validations',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a URL validation.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'url' => array(
        'description' => 'URL to be validated',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'validation_required' => array(
        'description' => 'Whether validation is required.',
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
      ),
      'schema_field' => array(
        'description' => 'Field the URL was from.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'date_validated' => array(
        'description' => 'Unix timestamp of last validation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'api_endpoint' => array(
        'description' => 'API Endpoint being validated.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'response_code' => array(
        'type' => 'int',
        'length' => 4,
        'not null' => FALSE,
        'description' => 'Response Code on URL Validation.',
      ),
      'response_message' => array(
        'description' => 'Response Message on URL Validation.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'resource_nid' => array(
        'description' => 'The node ID of the resource.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'resource_uuid' => array(
        'description' => 'The UUID of the resource.',
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 255,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'url_map' => array('url', 'api_endpoint'),
    ),
  );
  return $schema;
}


/**
 * Ensures that the output format field is in the table.
 *
 * Also sets outputformat to 'json' for all existing entries
 */
function open_data_schema_map_update_7001() {

  $column = array(
    'type' => 'varchar',
    'description' => "Output Format",
    'length' => 20,
    'not null' => TRUE,
    'default' => 'json',
  );

  $data_table_name = 'open_data_schema_map';
  if (!db_field_exists('open_data_schema_map', 'outputformat')) {
    db_add_field($data_table_name, 'outputformat', $column);
  }
}

/**
 * Ensures that the filter_enabled field is in the table.
 */
function open_data_schema_map_update_7002() {
  $column = array(
    'description' => 'Whether Data Federation Filter is enabled.',
    'type' => 'int',
    'not null' => TRUE,
    'size' => 'tiny',
    'default' => 0,
  );

  $data_table_name = 'open_data_schema_map';
  if (!db_field_exists('open_data_schema_map', 'filter_enabled')) {
    db_add_field($data_table_name, 'filter_enabled', $column);
  }
}

/**
 * Create odsm_url_validation table if doesn't exist.
 */
function open_data_schema_map_update_7003() {
  if (!db_table_exists('odsm_url_validation')) {
    $schema = open_data_schema_map_schema();
    db_create_table('odsm_url_validation', $schema['odsm_url_validation']);
  }
}
